import tkinter as tk
from tkinter import ttk, messagebox
from ..utils.status_utils import StatusMapping
from ..utils.theme_utils import ThemeManager

class AddMangaDialog(tk.Toplevel):
    def __init__(self, parent, manga_manager):
        super().__init__(parent)
        self.manga_manager = manga_manager
        
        self.title("Th√™m manga m·ªõi")
        self.geometry("600x800")
        self.resizable(False, False)
        
        # T·∫°o gradient background cho to√†n b·ªô c·ª≠a s·ªï
        self.bg_canvas = tk.Canvas(self, width=600, height=800)
        self.bg_canvas.place(x=0, y=0, relwidth=1, relheight=1)
        ThemeManager.create_gradient_background(self.bg_canvas, 600, 800)
        
        # T·∫°o main frame n·∫±m ·ªü gi·ªØa c·ª≠a s·ªï
        self.main_frame = ttk.Frame(self, style='Card.TFrame')
        self.main_frame.place(relx=0.5, rely=0.5, anchor='center', width=550, height=750)
        
        self.create_widgets()
        
        # Modal dialog
        self.transient(parent)
        self.grab_set()

    def create_widgets(self):
        # Header
        header_frame = ttk.Frame(self.main_frame, padding="20")
        header_frame.pack(fill='x')
        
        # Logo v√† ti√™u ƒë·ªÅ
        title_frame = ttk.Frame(header_frame)
        title_frame.pack(anchor='center', pady=(0, 20))
        
        logo_label = ttk.Label(title_frame, text="‚ûï", font=('Helvetica', 32))
        logo_label.pack(pady=(0, 10))
        
        title_label = ttk.Label(title_frame, 
                              text="Th√™m Manga M·ªõi",
                              style='Heading.TLabel')
        title_label.pack()

        # Form scrollable frame
        canvas = tk.Canvas(self.main_frame)
        scrollbar = ttk.Scrollbar(self.main_frame, orient="vertical", command=canvas.yview)
        form_frame = ttk.Frame(canvas, padding="20")

        # C·∫•u h√¨nh scroll
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Pack c√°c widget
        canvas.pack(side="left", fill="both", expand=True, padx=(20,0))
        scrollbar.pack(side="right", fill="y", padx=(0,20))
        
        # T·∫°o window trong canvas
        canvas.create_window((0, 0), window=form_frame, anchor="nw")
        
        # Style cho entry fields
        entry_style = {'width': 40, 'font': ThemeManager.FONTS['body']}
        label_style = {'font': ThemeManager.FONTS['body_bold'],
                      'foreground': ThemeManager.COLORS['text']}
        
        # C√°c tr∆∞·ªùng nh·∫≠p li·ªáu
        fields = [
            ("üìö Ti√™u ƒë·ªÅ:", "title"),
            ("üàÅ Ti√™u ƒë·ªÅ ti·∫øng Nh·∫≠t:", "title_japanese"),
            ("üë§ T√°c gi·∫£:", "author"),
            ("üìÖ NƒÉm xu·∫•t b·∫£n:", "year"),
            ("üè∑Ô∏è Th·ªÉ lo·∫°i:", "genres", "Ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y"),
            ("üìñ S·ªë t·∫≠p:", "volumes"),
            ("üìë S·ªë ch∆∞∆°ng:", "chapters"),
            ("‚≠ê X·∫øp h·∫°ng:", "rating"),
            ("üñºÔ∏è Link ·∫£nh:", "image_url", "Nh·∫≠p URL ·∫£nh b√¨a manga"),
        ]
        
        self.entries = {}
        
        # T·∫°o c√°c field
        row_counter = 0  # ƒê·∫øm s·ªë row th·ª±c t·∫ø
        for field_info in fields:
            label_text, field_name, *placeholder = field_info
            
            # Frame cho m·ªói field ƒë·ªÉ ch·ª©a label, entry v√† tooltip n·∫øu c√≥
            field_frame = ttk.Frame(form_frame)
            field_frame.grid(row=row_counter, column=0, sticky='ew', pady=(10, 5))
            row_counter += 1
            
            # Label
            label = ttk.Label(field_frame, text=label_text, **label_style)
            label.pack(side=tk.LEFT)
            
            # Info icon v√† tooltip cho tr∆∞·ªùng link ·∫£nh
            if field_name == "image_url":
                info_icon = ttk.Label(field_frame, text="‚ÑπÔ∏è", font=('Helvetica', 12))
                info_icon.pack(side=tk.LEFT, padx=(5, 0))
                
                tooltip_text = ("URL c·ªßa ·∫£nh b√¨a manga.\n"
                              "V√≠ d·ª•: https://example.com/manga-cover.jpg\n"
                              "ƒê·ªãnh d·∫°ng h·ªó tr·ª£: JPG, PNG\n"
                              "·∫¢nh s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông t·∫£i v·ªÅ v√† cache")
                
                self.create_tooltip(info_icon, tooltip_text)
            
            # Entry
            self.entries[field_name] = ttk.Entry(form_frame, **entry_style)
            self.entries[field_name].grid(row=row_counter, column=0, sticky='ew', pady=(0, 10))
            row_counter += 1
            
            # Placeholder text
            if placeholder:
                self.entries[field_name].insert(0, placeholder[0])
                self.entries[field_name].bind('<FocusIn>', 
                    lambda e, p=placeholder[0]: self.on_entry_click(e, p))
                self.entries[field_name].bind('<FocusOut>', 
                    lambda e, p=placeholder[0]: self.on_focus_out(e, p))
            
            # Th√™m th√¥ng tin m√¥ t·∫£ d∆∞·ªõi tr∆∞·ªùng link ·∫£nh
            if field_name == "image_url":
                desc_text = ("üí° Ch·ªâ c·∫ßn paste link ·∫£nh b√¨a manga t·ª´ m·ªôt trang web. "
                           "·∫¢nh s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông t·∫£i v·ªÅ v√† l∆∞u tr·ªØ.")
                desc_label = ttk.Label(form_frame, 
                                     text=desc_text,
                                     font=ThemeManager.FONTS['small'],
                                     foreground=ThemeManager.COLORS['text_secondary'],
                                     wraplength=400)
                desc_label.grid(row=row_counter, column=0, sticky='w', pady=(0, 10))
                row_counter += 1
        
        # Tr·∫°ng th√°i
        ttk.Label(form_frame, text="üìä Tr·∫°ng th√°i:", **label_style).grid(
            row=row_counter, column=0, sticky='w', pady=(10, 5))
        row_counter += 1
        
        self.status_var = tk.StringVar()
        status_combo = ttk.Combobox(form_frame, 
                                  textvariable=self.status_var,
                                  values=StatusMapping.get_vietnamese_statuses(),
                                  state='readonly',
                                  width=38,
                                  font=ThemeManager.FONTS['body'])
        status_combo.grid(row=row_counter, column=0, sticky='ew', pady=(0, 10))
        status_combo.current(0)
        row_counter += 1
        
        # T√≥m t·∫Øt
        ttk.Label(form_frame, text="üìù T√≥m t·∫Øt:", **label_style).grid(
            row=row_counter, column=0, sticky='w', pady=(10, 5))
        row_counter += 1
        
        self.synopsis_text = tk.Text(form_frame, 
                                   width=40, height=5,
                                   font=ThemeManager.FONTS['body'],
                                   wrap=tk.WORD)
        self.synopsis_text.grid(row=row_counter, column=0, sticky='ew', pady=(0, 20))
        row_counter += 1
        
        # Footer v·ªõi n√∫t ƒëi·ªÅu khi·ªÉn
        btn_frame = ttk.Frame(form_frame)
        btn_frame.grid(row=row_counter, column=0, pady=10)
        
        save_btn = ThemeManager.create_rounded_button(
            btn_frame,
            text="üíæ L∆∞u",
            command=self.save_manga,
            style='primary'
        )
        save_btn.pack(side=tk.LEFT, padx=5)
        
        cancel_btn = ThemeManager.create_rounded_button(
            btn_frame,
            text="H·ªßy",
            command=self.destroy,
            style='secondary'
        )
        cancel_btn.pack(side=tk.LEFT, padx=5)
        
        # C·∫≠p nh·∫≠t scroll region sau khi t·∫•t c·∫£ widgets ƒë∆∞·ª£c th√™m v√†o
        form_frame.update_idletasks()
        canvas.configure(scrollregion=canvas.bbox("all"))

    def on_entry_click(self, event, placeholder):
        """X·ª≠ l√Ω khi click v√†o entry field"""
        if event.widget.get() == placeholder:
            event.widget.delete(0, tk.END)

    def on_focus_out(self, event, placeholder):
        """X·ª≠ l√Ω khi focus ra kh·ªèi entry field"""
        if event.widget.get() == "":
            event.widget.insert(0, placeholder)

    def save_manga(self):
        """L∆∞u th√¥ng tin manga m·ªõi"""
        # Thu th·∫≠p d·ªØ li·ªáu t·ª´ c√°c tr∆∞·ªùng nh·∫≠p li·ªáu
        manga_data = {
            'title': self.entries['title'].get().strip(),
            'title_japanese': self.entries['title_japanese'].get().strip(),
            'author': self.entries['author'].get().strip(),
            'year': self.entries['year'].get().strip(),
            'genres': self.entries['genres'].get().strip(),
            'volumes': self.entries['volumes'].get().strip(),
            'chapters': self.entries['chapters'].get().strip(),
            'rating': self.entries['rating'].get().strip(),
            'image_url': self.entries['image_url'].get().strip(),
            'status': self.status_var.get(),
            'synopsis': self.synopsis_text.get('1.0', tk.END).strip()
        }
        
        # Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
        if not manga_data['title']:
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ manga!")
            return
            
        if not manga_data['author']:
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p t√™n t√°c gi·∫£!")
            return
            
        if not manga_data['genres'] or manga_data['genres'] == "Ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y":
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p th·ªÉ lo·∫°i!")
            return
            
        if not manga_data['status']:
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn tr·∫°ng th√°i!")
            return
        
        # Th√™m manga m·ªõi
        manga_id = self.manga_manager.add_manga(manga_data)
        
        if manga_id:
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ th√™m manga m·ªõi!")
            self.destroy()
        else:
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ th√™m manga. Vui l√≤ng th·ª≠ l·∫°i!")

    def create_tooltip(self, widget, text):
        """T·∫°o tooltip khi hover chu·ªôt tr√™n widget"""
        tooltip = None
        
        def enter(event):
            nonlocal tooltip
            x, y, _, _ = widget.bbox("insert")
            x += widget.winfo_rootx() + 25
            y += widget.winfo_rooty() + 20
            
            # T·∫°o c·ª≠a s·ªï tooltip
            tooltip = tk.Toplevel(widget)
            tooltip.wm_overrideredirect(True)
            tooltip.wm_geometry(f"+{x}+{y}")
            
            # T·∫°o label trong tooltip
            label = ttk.Label(tooltip, text=text,
                            font=ThemeManager.FONTS['small'],
                            foreground=ThemeManager.COLORS['text'],
                            background=ThemeManager.COLORS['surface'],
                            wraplength=300,
                            padding=5)
            label.pack()
            
        def leave(event):
            nonlocal tooltip
            if tooltip:
                tooltip.destroy()
                tooltip = None
        
        widget.bind('<Enter>', enter)
        widget.bind('<Leave>', leave)
