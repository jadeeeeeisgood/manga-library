import tkinter as tk
from tkinter import ttk, messagebox
from .login_window import LoginWindow
from ..utils.image_utils import ImageCache
from ..utils.status_utils import StatusMapping
from ..utils.theme_utils import ThemeManager

class MainWindow(ttk.Frame):
    def __init__(self, parent, auth_manager, manga_manager):
        print("Initializing MainWindow...")
        super().__init__(parent)
        self.parent = parent
        self.auth_manager = auth_manager
        self.manga_manager = manga_manager
        self.image_cache = ImageCache()
        
        # C·∫•u h√¨nh window
        parent.title("Th∆∞ vi·ªán Manga")
        self.setup_window()
        self.create_menu()
        self.create_widgets()
        self.create_context_menu()
        
        # Thi·∫øt l·∫≠p theme
        ThemeManager.setup_theme()
        
        # Pack frame ch√≠nh
        self.pack(expand=True, fill='both', padx=20, pady=20)
        print("MainWindow setup completed")
        
        # Hi·ªÉn th·ªã c·ª≠a s·ªï ƒëƒÉng nh·∫≠p khi kh·ªüi ƒë·ªông
        self.show_login_window()
        print("Login window displayed")

    def setup_window(self):
        """C·∫•u h√¨nh c·ª≠a s·ªï ch√≠nh"""
        window_width = 1200
        window_height = 800
        screen_width = self.parent.winfo_screenwidth()
        screen_height = self.parent.winfo_screenheight()
        center_x = int(screen_width/2 - window_width/2)
        center_y = int(screen_height/2 - window_height/2)
        self.parent.geometry(f'{window_width}x{window_height}+{center_x}+{center_y}')
        self.parent.minsize(800, 600)
        
        # C·∫•u h√¨nh background v√† padding
        self.style = ttk.Style()
        self.style.configure('MainWindow.TFrame', background=ThemeManager.COLORS['background'])
        self.configure(style='MainWindow.TFrame', padding=10)

    def create_menu(self):
        """T·∫°o menu ch√≠nh"""
        self.menubar = tk.Menu(self.parent)
        self.parent.config(menu=self.menubar)
        
        # Menu T√†i kho·∫£n
        account_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label="T√†i kho·∫£n", menu=account_menu)
        account_menu.add_command(label="Th√¥ng tin c√° nh√¢n", command=self.show_profile)
        account_menu.add_command(label="ƒê·ªïi m·∫≠t kh·∫©u", command=self.show_change_password)
        account_menu.add_separator()
        account_menu.add_command(label="ƒêƒÉng xu·∫•t", command=self.logout)
        
        # Menu Manga
        manga_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label="Manga", menu=manga_menu)
        manga_menu.add_command(label="Th√™m manga m·ªõi", command=self.show_add_manga)
        manga_menu.add_command(label="T√¨m ki·∫øm t·ª´ API", command=self.show_search_api)
        manga_menu.add_separator()
        manga_menu.add_command(label="Xem top manga", command=self.show_top_manga)
        
        # Menu Y√™u th√≠ch
        favorites_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label="Y√™u th√≠ch", menu=favorites_menu)
        favorites_menu.add_command(label="Xem danh s√°ch y√™u th√≠ch", command=self.show_favorites)
        
        # Menu Tr·ª£ gi√∫p
        help_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label="Tr·ª£ gi√∫p", menu=help_menu)
        help_menu.add_command(label="H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng", command=self.show_help)
        help_menu.add_command(label="V·ªÅ ch√∫ng t√¥i", command=self.show_about)

    def create_context_menu(self):
        """T·∫°o menu chu·ªôt ph·∫£i"""
        self.context_menu = tk.Menu(self, tearoff=0)
        self.context_menu.add_command(label="‚ô• Th√™m v√†o y√™u th√≠ch", command=self.toggle_favorite_selected)
        self.context_menu.add_command(label="üóëÔ∏è X√≥a kh·ªèi th∆∞ vi·ªán", command=self.delete_selected)

    def create_widgets(self):
        """T·∫°o c√°c widget ch√≠nh"""
        # Frame ch√≠nh v·ªõi background v√† padding m·ªõi
        self.main_frame = ttk.Frame(self, style='Card.TFrame', padding="20")
        self.main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # C·∫•u h√¨nh grid
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(0, weight=1)
        self.main_frame.grid_columnconfigure(1, weight=1)
        self.main_frame.grid_rowconfigure(1, weight=1)
        
        # Header v·ªõi style m·ªõi
        self.create_header()
        
        # Sidebar v·ªõi style m·ªõi
        self.create_sidebar()
        
        # Khung hi·ªÉn th·ªã manga v·ªõi style m·ªõi
        self.create_manga_display()

    def create_header(self):
        """T·∫°o header v·ªõi style m·ªõi"""
        header_frame = ttk.Frame(self.main_frame)
        header_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 20))
        
        # Logo v√† ti√™u ƒë·ªÅ
        logo_label = ttk.Label(header_frame, text="üìö", font=('Helvetica', 24))
        logo_label.pack(side=tk.LEFT, padx=(0, 10))
        
        title_label = ttk.Label(header_frame, text="Th∆∞ vi·ªán Manga", 
                               style='Heading.TLabel')
        title_label.pack(side=tk.LEFT)
        
        # Thanh c√¥ng c·ª• b√™n ph·∫£i
        toolbar_frame = ttk.Frame(header_frame)
        toolbar_frame.pack(side=tk.RIGHT)
        
        # N√∫t Refresh v·ªõi style m·ªõi
        refresh_btn = ThemeManager.create_rounded_button(
            toolbar_frame, text="üîÑ L√†m m·ªõi", 
            command=self.refresh_display,
            style='secondary',
            width=15
        )
        refresh_btn.pack(side=tk.LEFT, padx=5)
        
        # Label ng∆∞·ªùi d√πng v·ªõi style m·ªõi
        self.user_label = ttk.Label(toolbar_frame, text="", 
                                  font=ThemeManager.FONTS['body_bold'],
                                  foreground=ThemeManager.COLORS['text'])
        self.user_label.pack(side=tk.LEFT, padx=10)

    def create_sidebar(self):
        """T·∫°o sidebar v·ªõi style m·ªõi"""
        sidebar_frame = ttk.Frame(self.main_frame, style='Card.TFrame')
        sidebar_frame.grid(row=1, column=0, sticky=(tk.W, tk.N, tk.S), padx=(0, 20))
        
        # Ti√™u ƒë·ªÅ t√¨m ki·∫øm
        search_title = ttk.Label(sidebar_frame, text="T√åM KI·∫æM", 
                               style='Subheading.TLabel')
        search_title.pack(pady=(0, 15))
        
        # Thanh t√¨m ki·∫øm v·ªõi style m·ªõi
        search_frame = ttk.Frame(sidebar_frame)
        search_frame.pack(fill='x', pady=(0, 15))
        
        self.search_var = tk.StringVar()
        search_entry = ttk.Entry(search_frame, textvariable=self.search_var, 
                               width=25, font=ThemeManager.FONTS['body'])
        search_entry.pack(side=tk.LEFT, padx=(0, 5))
        search_entry.bind('<Return>', lambda e: self.search_manga())
        
        search_btn = ThemeManager.create_rounded_button(
            search_frame, text="üîç T√¨m", 
            command=self.search_manga,
            style='primary',
            width=8
        )
        search_btn.pack(side=tk.LEFT)
        
        # B·ªô l·ªçc th·ªÉ lo·∫°i
        genre_frame = ttk.LabelFrame(sidebar_frame, text="TH·ªÇ LO·∫†I",
                                   padding="10")
        genre_frame.pack(fill='x', pady=(0, 15))
        
        self.genre_var = tk.StringVar()
        genres = ['T·∫•t c·∫£', 'Action', 'Adventure', 'Comedy', 'Drama', 
                 'Fantasy', 'Horror', 'Romance', 'Sci-Fi']
        genre_combo = ttk.Combobox(genre_frame, textvariable=self.genre_var,
                                 values=genres, state='readonly',
                                 font=ThemeManager.FONTS['body'])
        genre_combo.current(0)
        genre_combo.pack(fill='x')
        genre_combo.bind('<<ComboboxSelected>>', lambda e: self.filter_by_genre())
        
        # B·ªô l·ªçc tr·∫°ng th√°i
        status_frame = ttk.LabelFrame(sidebar_frame, text="TR·∫†NG TH√ÅI",
                                    padding="10")
        status_frame.pack(fill='x')
        
        self.status_var = tk.StringVar()
        statuses = ['T·∫•t c·∫£'] + list(StatusMapping.get_vietnamese_statuses())
        status_combo = ttk.Combobox(status_frame, textvariable=self.status_var,
                                  values=statuses, state='readonly',
                                  font=ThemeManager.FONTS['body'])
        status_combo.current(0)
        status_combo.pack(fill='x')
        status_combo.bind('<<ComboboxSelected>>', lambda e: self.filter_by_status())

    def create_manga_display(self):
        """T·∫°o khung hi·ªÉn th·ªã manga v·ªõi style m·ªõi"""
        # Frame ch·ª©a danh s√°ch manga v·ªõi style Card
        display_frame = ttk.Frame(self.main_frame, style='Card.TFrame')
        display_frame.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # T·∫°o Treeview v·ªõi style m·ªõi
        columns = ('id', 'title', 'author', 'genres', 'status', 'rating')
        self.manga_tree = ttk.Treeview(display_frame, columns=columns, 
                                     show='headings', style='Treeview')
        
        # ƒê·ªãnh nghƒ©a c√°c c·ªôt v·ªõi style m·ªõi
        headings = {
            'id': ('ID', 50),
            'title': ('Ti√™u ƒë·ªÅ', 300),
            'author': ('T√°c gi·∫£', 150),
            'genres': ('Th·ªÉ lo·∫°i', 200),
            'status': ('Tr·∫°ng th√°i', 100),
            'rating': ('X·∫øp h·∫°ng', 80)
        }
        
        for col, (text, width) in headings.items():
            self.manga_tree.heading(col, text=text)
            self.manga_tree.column(col, width=width)
        
        # Th√™m thanh cu·ªôn v·ªõi style m·ªõi
        scrollbar = ttk.Scrollbar(display_frame, orient=tk.VERTICAL,
                                command=self.manga_tree.yview)
        self.manga_tree.configure(yscrollcommand=scrollbar.set)
        
        # ƒê·∫∑t v·ªã tr√≠
        self.manga_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        # C·∫•u h√¨nh grid
        display_frame.grid_columnconfigure(0, weight=1)
        display_frame.grid_rowconfigure(0, weight=1)
        
        # Bind s·ª± ki·ªán
        self.manga_tree.bind('<Double-1>', self.show_manga_details)
        self.manga_tree.bind('<Button-3>', self.show_context_menu)

    def show_context_menu(self, event):
        """Hi·ªÉn th·ªã menu chu·ªôt ph·∫£i"""
        item = self.manga_tree.identify_row(event.y)
        if item:
            # Select the item under cursor
            self.manga_tree.selection_set(item)
            try:
                manga_id = self.manga_tree.item(item)['values'][0]
                manga = self.manga_manager.get_manga(manga_id)
                if manga:
                    # Update menu label based on favorite status
                    is_favorite = manga_id in self.auth_manager.get_current_user().get('favorites', [])
                    self.context_menu.entryconfig(
                        0,  # First menu item
                        label="‚ô• X√≥a kh·ªèi y√™u th√≠ch" if is_favorite else "‚ô• Th√™m v√†o y√™u th√≠ch"
                    )
                    self.context_menu.post(event.x_root, event.y_root)
            except (IndexError, TypeError):
                pass

    def toggle_favorite_selected(self):
        """Th√™m/x√≥a manga ƒë∆∞·ª£c ch·ªçn v√†o danh s√°ch y√™u th√≠ch"""
        selection = self.manga_tree.selection()
        if not selection:
            return
        
        manga_id = self.manga_tree.item(selection[0])['values'][0]
        user = self.auth_manager.get_current_user()
        if not user:
            messagebox.showerror("L·ªói", "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y")
            return
        
        is_favorite = manga_id in user.get('favorites', [])
        success, message = self.auth_manager.update_favorites(user['id'], manga_id, not is_favorite)
        
        if success:
            messagebox.showinfo("Th√†nh c√¥ng", message)
        else:
            messagebox.showerror("L·ªói", message)

    def delete_selected(self):
        """X√≥a manga ƒë∆∞·ª£c ch·ªçn kh·ªèi th∆∞ vi·ªán"""
        selection = self.manga_tree.selection()
        if not selection:
            return
            
        manga_id = self.manga_tree.item(selection[0])['values'][0]
        manga = self.manga_manager.get_manga(manga_id)
        
        if manga:
            if messagebox.askyesno("X√°c nh·∫≠n x√≥a", f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a '{manga['title']}' kh·ªèi th∆∞ vi·ªán?"):
                if self.manga_manager.delete_manga(manga_id):
                    # X√≥a kh·ªèi danh s√°ch y√™u th√≠ch n·∫øu c√≥
                    user = self.auth_manager.get_current_user()
                    if user and manga_id in user.get('favorites', []):
                        self.auth_manager.update_favorites(user['id'], manga_id, False)
                    messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x√≥a manga kh·ªèi th∆∞ vi·ªán!")
                    self.manga_tree.delete(selection)
                else:
                    messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ x√≥a manga. Vui l√≤ng th·ª≠ l·∫°i!")

    def show_login_window(self):
        """Hi·ªÉn th·ªã c·ª≠a s·ªï ƒëƒÉng nh·∫≠p"""
        login_window = LoginWindow(self.parent, self.auth_manager, self.on_login_success)
        
        # ·∫®n menu khi ch∆∞a ƒëƒÉng nh·∫≠p
        self.menubar.entryconfig("T√†i kho·∫£n", state="disabled")
        self.menubar.entryconfig("Manga", state="disabled")
        self.menubar.entryconfig("Y√™u th√≠ch", state="disabled")

    def on_login_success(self):
        """X·ª≠ l√Ω sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng"""
        # B·∫≠t menu
        self.menubar.entryconfig("T√†i kho·∫£n", state="normal")
        self.menubar.entryconfig("Manga", state="normal")
        self.menubar.entryconfig("Y√™u th√≠ch", state="normal")
        
        # C·∫≠p nh·∫≠t label ng∆∞·ªùi d√πng
        user = self.auth_manager.get_current_user()
        self.user_label.config(text=f"Xin ch√†o, {user['username']}")
        
        # T·∫£i danh s√°ch manga
        self.refresh_display()

    def logout(self):
        """X·ª≠ l√Ω ƒëƒÉng xu·∫•t"""
        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën ƒëƒÉng xu·∫•t?"):
            success, message = self.auth_manager.logout()
            if success:
                self.user_label.config(text="")
                self.manga_tree.delete(*self.manga_tree.get_children())
                self.show_login_window()

    def refresh_display(self):
        """L√†m m·ªõi danh s√°ch manga"""
        # X√≥a d·ªØ li·ªáu c≈©
        self.manga_tree.delete(*self.manga_tree.get_children())
        
        # L·∫•y danh s√°ch manga v√† hi·ªÉn th·ªã
        manga_list = self.manga_manager.get_all_manga()
        for manga in manga_list:
            self.manga_tree.insert('', 'end', values=(
                manga.get('id', ''),
                manga.get('title', ''),
                manga.get('author', ''),
                manga.get('genres', '')[:30] + ('...' if len(manga.get('genres', '')) > 30 else ''),
                manga.get('status', ''),
                manga.get('rating', '')
            ))

    def search_manga(self):
        """T√¨m ki·∫øm manga"""
        keyword = self.search_var.get().strip()
        if keyword:
            results = self.manga_manager.search_manga(keyword)
            self.update_manga_display(results)

    def filter_by_genre(self):
        """L·ªçc manga theo th·ªÉ lo·∫°i"""
        genre = self.genre_var.get()
        if genre != 'T·∫•t c·∫£':
            results = self.manga_manager.search_manga_by_genre(genre)
            self.update_manga_display(results)
        else:
            self.refresh_display()

    def filter_by_status(self):
        """L·ªçc manga theo tr·∫°ng th√°i"""
        status = self.status_var.get()
        if status != 'T·∫•t c·∫£':
            results = [m for m in self.manga_manager.get_all_manga() if m.get('status') == status]
            self.update_manga_display(results)
        else:
            self.refresh_display()

    def update_manga_display(self, manga_list):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã danh s√°ch manga"""
        self.manga_tree.delete(*self.manga_tree.get_children())
        for manga in manga_list:
            self.manga_tree.insert('', 'end', values=(
                manga.get('id', ''),
                manga.get('title', ''),
                manga.get('author', ''),
                manga.get('genres', '')[:30] + ('...' if len(manga.get('genres', '')) > 30 else ''),
                manga.get('status', ''),
                manga.get('rating', '')
            ))

    def show_manga_details(self, event):
        """Hi·ªÉn th·ªã chi ti·∫øt manga"""
        # L·∫•y item ƒë∆∞·ª£c ch·ªçn
        selected_item = self.manga_tree.selection()
        if not selected_item:
            return
        
        # L·∫•y ID manga
        manga_id = self.manga_tree.item(selected_item)['values'][0]
        manga = self.manga_manager.get_manga(manga_id)
        
        if manga:
            # T·∫°o c·ª≠a s·ªï chi ti·∫øt
            detail_window = tk.Toplevel(self)
            detail_window.title(f"Chi ti·∫øt: {manga.get('title', '')}")
            detail_window.geometry("600x800")
            
            # Frame ch√≠nh
            main_frame = ttk.Frame(detail_window, padding="20")
            main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
            
            # Th√™m ·∫£nh manga n·∫øu c√≥
            if manga.get('image_url'):
                try:
                    image = self.image_cache.get_image(manga['image_url'], size=(200, 300))
                    if image:
                        image_label = ttk.Label(main_frame, image=image)
                        image_label.image = image  # Gi·ªØ tham chi·∫øu ƒë·∫øn ·∫£nh
                        image_label.grid(row=0, column=0, columnspan=2, pady=(0, 20))
                except Exception as e:
                    print(f"Error loading image: {e}")
            
            # Hi·ªÉn th·ªã th√¥ng tin
            row = 1
            for field, value in [
                ("Ti√™u ƒë·ªÅ", manga.get('title', '')),
                ("Ti√™u ƒë·ªÅ ti·∫øng Nh·∫≠t", manga.get('title_japanese', '')),
                ("T√°c gi·∫£", manga.get('author', '')),
                ("NƒÉm xu·∫•t b·∫£n", manga.get('year', '')),
                ("Th·ªÉ lo·∫°i", manga.get('genres', '')),
                ("Tr·∫°ng th√°i", manga.get('status', '')),
                ("S·ªë t·∫≠p", manga.get('volumes', '')),
                ("S·ªë ch∆∞∆°ng", manga.get('chapters', '')),
                ("X·∫øp h·∫°ng", manga.get('rating', '')),
            ]:
                ttk.Label(main_frame, text=f"{field}:", font=('Helvetica', 10, 'bold')).grid(row=row, column=0, sticky=tk.W, pady=5)
                ttk.Label(main_frame, text=str(value), wraplength=400).grid(row=row, column=1, sticky=tk.W, pady=5)
                row += 1
            
            # T√≥m t·∫Øt
            ttk.Label(main_frame, text="T√≥m t·∫Øt:", font=('Helvetica', 10, 'bold')).grid(row=row, column=0, sticky=tk.W, pady=5)
            synopsis = tk.Text(main_frame, wrap=tk.WORD, width=50, height=10)
            synopsis.grid(row=row, column=1, sticky=(tk.W, tk.E), pady=5)
            synopsis.insert('1.0', manga.get('synopsis', ''))
            synopsis.config(state='disabled')

            # Th√™m n√∫t Y√™u th√≠ch
            favorite_button = ttk.Button(
                main_frame,
                text="‚ô• Th√™m v√†o y√™u th√≠ch" if manga_id not in self.auth_manager.get_current_user().get('favorites', []) else "‚ô• X√≥a kh·ªèi y√™u th√≠ch",
                command=lambda: self.toggle_favorite(manga_id)
            )
            favorite_button.grid(row=row+1, column=0, columnspan=2, pady=20)

    def toggle_favorite(self, manga_id):
        """Th√™m/x√≥a manga kh·ªèi danh s√°ch y√™u th√≠ch"""
        user = self.auth_manager.get_current_user()
        if not user:
            messagebox.showerror("L·ªói", "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y")
            return
        
        is_favorite = manga_id in user.get('favorites', [])
        success, message = self.auth_manager.update_favorites(user['id'], manga_id, not is_favorite)
        
        if success:
            messagebox.showinfo("Th√†nh c√¥ng", message)
        else:
            messagebox.showerror("L·ªói", message)

    def show_add_manga(self):
        """Hi·ªÉn th·ªã form th√™m manga m·ªõi"""
        from .add_manga_dialog import AddMangaDialog
        dialog = AddMangaDialog(self, self.manga_manager)
        self.wait_window(dialog)
        # Refresh sau khi th√™m manga m·ªõi
        self.refresh_display()

    def show_search_api(self):
        """Hi·ªÉn th·ªã form t√¨m ki·∫øm t·ª´ API"""
        from .search_api_dialog import SearchAPIDialog
        dialog = SearchAPIDialog(self, self.manga_manager)
        self.wait_window(dialog)
        # Refresh sau khi th√™m manga m·ªõi t·ª´ API
        self.refresh_display()

    def show_top_manga(self):
        """Hi·ªÉn th·ªã danh s√°ch top manga"""
        from .top_manga_dialog import TopMangaDialog
        dialog = TopMangaDialog(self, self.manga_manager)
        self.wait_window(dialog)
        # Refresh sau khi th√™m manga m·ªõi t·ª´ danh s√°ch top
        self.refresh_display()

    def show_favorites(self):
        """Hi·ªÉn th·ªã danh s√°ch manga y√™u th√≠ch"""
        user = self.auth_manager.get_current_user()
        if not user:
            messagebox.showerror("L·ªói", "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem danh s√°ch y√™u th√≠ch")
            return
        
        favorites = self.manga_manager.get_user_favorites(user.get('favorites', []))
        self.update_manga_display(favorites)

    def show_profile(self):
        """Hi·ªÉn th·ªã th√¥ng tin c√° nh√¢n"""
        from .profile_dialog import ProfileDialog
        dialog = ProfileDialog(self, self.auth_manager)
        self.wait_window(dialog)

    def show_change_password(self):
        """Hi·ªÉn th·ªã form ƒë·ªïi m·∫≠t kh·∫©u"""
        from .change_password_dialog import ChangePasswordDialog
        dialog = ChangePasswordDialog(self, self.auth_manager)
        self.wait_window(dialog)

    def show_help(self):
        """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"""
        messagebox.showinfo("H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng", 
            "Ch√†o m·ª´ng ƒë·∫øn v·ªõi Th∆∞ vi·ªán Manga!\n\n"
            "- ƒêƒÉng nh·∫≠p/ƒêƒÉng k√Ω t√†i kho·∫£n ƒë·ªÉ b·∫Øt ƒë·∫ßu\n"
            "- T√¨m ki·∫øm manga b·∫±ng thanh t√¨m ki·∫øm\n"
            "- L·ªçc manga theo th·ªÉ lo·∫°i v√† tr·∫°ng th√°i\n"
            "- Nh·∫•p ƒë√∫p v√†o m·ªôt manga ƒë·ªÉ xem chi ti·∫øt\n"
            "- Nh·∫•p chu·ªôt ph·∫£i ƒë·ªÉ th√™m/x√≥a y√™u th√≠ch ho·∫∑c x√≥a manga\n"
            "- Theo d√µi ti·∫øn ƒë·ªô ƒë·ªçc c·ªßa b·∫°n\n\n"
            "ƒê·ªÉ bi·∫øt th√™m th√¥ng tin chi ti·∫øt, vui l√≤ng li√™n h·ªá h·ªó tr·ª£."
        )

    def show_about(self):
        """Hi·ªÉn th·ªã th√¥ng tin v·ªÅ ·ª©ng d·ª•ng"""
        messagebox.showinfo("V·ªÅ ch√∫ng t√¥i",
            "Th∆∞ vi·ªán Manga v1.0\n\n"
            "M·ªôt ·ª©ng d·ª•ng qu·∫£n l√Ω manga ƒë∆°n gi·∫£n v√† ti·ªán l·ª£i.\n\n"
            "T√≠nh nƒÉng:\n"
            "- Qu·∫£n l√Ω b·ªô s∆∞u t·∫≠p manga\n"
            "- T√¨m ki·∫øm v√† l·ªçc manga\n"
            "- Theo d√µi ti·∫øn ƒë·ªô ƒë·ªçc\n"
            "- ƒê·ªìng b·ªô v·ªõi MyAnimeList\n\n"
            "¬© 2024 MangaLibrary. All rights reserved."
        )
